pov.data <- read.csv("./ACSDT5Y2017.C17002_2020-08-29T152002/ACSDT5Y2017.C17002_data_with_overlays_2020-08-29T151945.csv") # "ACS_17_5YR_C17002_with_ann.csv"
# USE YOUR OWN working directory and file name
setwd("D:/Dropbox (Personal)/School/Fall2020/CP6025/Labs/Lab3/ACSDT5Y2017.C17002_2020-08-29T152002") # Use your own pathname
pov.data <- read.csv("./ACSDT5Y2017.C17002_data_with_overlays_2020-08-29T151945.csv") # "ACS_17_5YR_C17002_with_ann.csv"
# USE YOUR OWN working directory and file name
setwd("D:/Dropbox (Personal)/School/Fall2020/CP6025/Labs/Lab3/ACSDT5Y2017.C17002_2020-08-29T152002") # Use your own pathname
# Install required packages
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("psych")) install.packages("psych")
# Call the packages using library()
library(tidyverse)
library(psych)
# Call the packages using library()
library(tidyverse)
library(psych)
# USE YOUR OWN working directory and file name
setwd("D:/Dropbox (Personal)/School/Fall2020/CP6025/Labs/Lab3/ACSDT5Y2017.C17002_2020-08-29T152002") # Use your own pathname
pov.data <- read.csv("./ACSDT5Y2017.C17002_data_with_overlays_2020-08-29T151945.csv") # "ACS_17_5YR_C17002_with_ann.csv"
# Check the data
head(pov.data)
min(pov.data$C17002_001E)
?read.csv
df
df[-1,]
df[-4,]
df[-3,]
df[-2,]
df[-2:-3,]
df[-2:-4,]
pov.data
nrow(pov.data)
pov.data <- pov.data[-2,]
nrow(pov.data)
pov.data
# Call the packages using library()
library(tidyverse)
library(psych)
# USE YOUR OWN working directory and file name
setwd("D:/Dropbox (Personal)/School/Fall2020/CP6025/Labs/Lab3/ACSDT5Y2017.C17002_2020-08-29T152002") # Use your own pathname
pov.data <- read.csv("./ACSDT5Y2017.C17002_data_with_overlays_2020-08-29T151945.csv") # "ACS_17_5YR_C17002_with_ann.csv"
# Check the data
head(pov.data)
pov.data <- pov.data[-1,]
head(pov.data)
str(pov.data)
# Drop the first row from pov.data and assign it to pov.data.header
pov.data.header <- pov.data[-1,]
str(pov.data.header)
# Drop the first row from pov.data and assign it to pov.data.header
pov.data.header <- pov.data[-1,]
head(pov.data.header)
str(pov.data.header)
pov.data
names(pov.data)
names(pov.data)[1] <- "!!hi"
head(pov.data)
names(pov.data)[1] <- "!!hi you"
pov.data
head(pov.data)
colnames(pov.data)
# Call the packages using library()
library(tidyverse)
library(psych)
# USE YOUR OWN working directory and file name
setwd("D:/Dropbox (Personal)/School/Fall2020/CP6025/Labs/Lab3/ACSDT5Y2017.C17002_2020-08-29T152002") # Use your own pathname
pov.data <- read.csv("./ACSDT5Y2017.C17002_data_with_overlays_2020-08-29T151945.csv") # "ACS_17_5YR_C17002_with_ann.csv"
# Check the data
head(pov.data)
names(pov.data)
library(ggplot2)
ggplot(pov.data) + geom_histogram(aes(x = Estimate..Total..Under..50))
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("psych")) install.packages("psych")
# USE YOUR OWN working directory and file name
setwd("D:/Dropbox (Personal)/School/Fall2020/CP6025/Labs/Lab3/ACSDT5Y2017.C17002_2020-08-29T152002") # Use your own pathname
pov.data <- read.csv("./ACSDT5Y2017.C17002_data_with_overlays_2020-08-29T151945.csv") # "ACS_17_5YR_C17002_with_ann.csv"
# Check the data
head(pov.data)
str(pov.data)
my.vec <- c(1,3,5,7,9,11)
my.vec[3] # This returns 5, which is in 3rd position of the vector
my.vec[c(TRUE, FALSE, FALSE, TRUE, TRUE, FALSE)] # this returns 1,7,9, those which are in position where TRUEs are. Think of TRUEs and FALSEs as filters. TRUEs let through the values being filtered. FALSEs block the values being filtered. As a result, you get values in a vector that are in the same position as TRUEs in the square bracket.
my.df <- data.frame(a = c("a", "b", "c", "d"),
b = c(1, 2, 3, 4),
Avengers = c("Peter", "Natasha", "Hulk", "Thor"),
stringsAsFactors = FALSE)
my.df # See what the data.frame looks like before subsetting
my.df[1 , 3] # This returns the 1st row of the 3rd column, which is "Peter"
my.df[2:3 , 1] # This returns 2nd and 3rd rows of the first column, which are "b", "c"
my.df[ , "Avengers"] # This returns all rows in the column named "Avengers". If the row-part in the square bracket is empty, it means all rows. If columns-part in the square bracket is empty, it mean all columns.
my.df[c(FALSE, TRUE, FALSE, TRUE) , "Avengers"] # This will return the 2nd and 4th rows (which are where TRUEs are located) of the column "Avengers", which are Natasha and Thor.
pov.data.var <- pov.data[ , c("GEO_ID", "NAME", "C17002_001E", "C17002_002E", "C17002_003E") ]
head(pov.data.var)
# Separate 'GEO.display.label' variable into three variables at a comma and a space
pov.data.sep <- separate(
data = pov.data.var,                  # 1st: specify the data.frame
col = NAME,                           # 2nd: specify the name of the variable you want to parse
into = c("tract", "county", "state"), # 3rd: a list of variable names that will be created as the result of parsing
sep = ", ")                           # 4th: character string that will be used as the separator
write.csv(pov.data.sep, "pov_data_sep.csv")
getwd()
# Separate 'GEO.display.label' variable into three variables at a comma and a space
pov.data.sep <- separate(
data = pov.data.var,                  # 1st: specify the data.frame
col = NAME,                           # 2nd: specify the name of the variable you want to parse
into = c("tract", "county", "state"), # 3rd: a list of variable names that will be created as the result of parsing
sep = ", ")                           # 4th: character string that will be used as the separator
colnames(pov.data.sep)
# Rename variables
colnames(pov.data.sep)[5:7] <- c("total", "under00.50", "under50.99")
head(pov.data.sep)
# Rename variables
colnames(pov.data.sep)[5:7] <- c("total", "pov0050", "pov5099")
head(pov.data.sep)
# Rename variables
colnames(pov.data.sep)[5:7] <- c("total", "under00.50", "under50.99")
head(pov.data.sep)
# Rename variables
colnames(pov.data.sep)[5:7] <- c("total", "under00_50", "under50_99")
head(pov.data.sep)
write.csv(pov.data.sep, "pov.data.sep.csv")
# C reate a toy vector
my.vec <- c(1,2,3,10,20,30)
1 %in% my.vec # This returns one TRUE because there is 1 in my.vec
15 %in% my.vec # This returns FALSE because my.vec does not contain 15
c(2,3,40) %in% my.vec # This gives TRUE, TRUE, FALSE because the first two elements are in my.vec while the last isn't
# Create a logical vector in which rows that have the four counties in 'county' column gets TRUE and otherwise FALSE
county.filter <- pov.data.sep$county %in% c("Fulton County", "DeKalb County", "Cobb County", "Clayton County")
county.filter # In this county.filter vector, there are as many elements as the number of rows in pov.data.sep
# Filter 'pov.data.sep' using 'county.filter'
pov.data.4county <- pov.data.sep[county.filter, ]
# Number of rows and columns after filtering
head(pov.data.4county)
# This code is ...
county.filter <- pov.data.sep$county %in% c("Fulton County", "DeKalb County", "Cobb County", "Clayton County")
pov.data.4county <- pov.data.sep[county.filter, ]
# Identical to ...
pov.data.4county <- pov.data.sep[pov.data.sep$county %in% c("Fulton County", "DeKalb County", "Cobb County", "Clayton County"), ]
# Calculate percentages
pov.data.4county$p.pov <- (pov.data.4county$under00.50 + pov.data.4county$under50.99) / pov.data.4county$total
# Calculate percentages
pov.data.4county$p.pov <- (pov.data.4county$under00_50 + pov.data.4county$under50_99) / pov.data.4county$total
summary(pov.data.4county$p.pov)
# Filtering out NAs
na.filter <- !is.na(pov.data.4county$p.pov)
df.ready <- pov.data.4county[na.filter, ]
summary(df.ready)
# Calculating mean
p.pov.mean <- mean(df.ready$p.pov)
# Calculating standard deviation
p.pov.sd <- sd(df.ready$p.pov)
# Calculate z-score and assign it into p.pov.z
df.ready$p.pov.z <- (df.ready$p.pov - p.pov.mean) / p.pov.sd
summary(df.ready)
summary(df.ready)
df.ready
# Calculating z-score using scale()
df.ready$p.pov.scale <- scale(df.ready$p.pov, center = TRUE, scale = TRUE)
summary(df.ready)
df.ready$p.pov.scale
unclass(df.ready$p.pov.scale)
sd(df.ready$p.pov.z)
dt(0.5)
?dt
dnorm(0.9)
dnorm(0)
curve(dnorm)
curve(dnorm, xlim = c(-3, 3))
?dnorm
dnorm(0.975)
dnorm(-0.975)
qnorm(0.975)
qnorm(1-0.975)
pnorm(1.9)
pnorm(1.96)
qnorm(0.975)
qnorm(0.95)
?pbinom
pbinom(0.5, 1000)
pbinom(0.5, 1000, prob = 0.5)
curve(dbinom)
curve(dbinom(1000))
pbinom(0.9, 20, 0.5)
pbinom(0.9, 20, 0.9)
pbinom(0.9, 20, 0.1)
qbinom(0.5, 40, 0.5)
qbinom(0.5, 100, 0.5)
qbinom(0.5, 100, 0.9)
qbinom(0.1, 100, 0.9)
qbinom(0.2, 100, 0.9)
qbinom(0.2, 100, 0.7)
qbinom(0.2, 100, 0.5)
qbinom(0.5, 100, 0.5)
qbinom(0.5, 20, 0.7)
qbinom(0.5, 20, 0.7)
qbinom(0.7, 20, 0.7)
qbinom(0.5, 20, 0.7)
?dnorm
?dt
qnorm(0.975)
pnorm(0.975)
pnorm(1.96)
pnorm(1.96)
qnorm(1.96)
qnorm(0.975)
pnorm(1.96)
pnorm(0)
x=seq(-4,4,length=200)
y=dnorm(x)
plot(x,y,type="l", lwd=2, col="blue")
x=seq(-4,1,length=200)
y=dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
# normal distribution
x = seq(-4, 1, length = 200)
x
y = dnorm(x)
y
plot(x, y)
x = seq(-4, 1, length=200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
# area under the curve
x = seq(-4, 1, length=200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
plot()
x = seq(-4, 1, length=200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
x = seq(-4, 1, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue')
# area under the curve
x = seq(-4, 1, length=200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue')
# area under the curve
x = seq(-4, 1, length=200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
axis(side = 1, at = c([-4, -3, -2, -1, 0, 1 , 2, 3, 4]))
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
# normal distribution
# base line
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# area under the curve
x = seq(-4, 1, length=200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
title = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# area under the curve
x = seq(-4, 1, length=200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
# normal distribution
# base line
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# area under the curve
x = seq(-4, 1, length=200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
setwd("D:\Dropbox (Personal)\School\Fall2020\CP6025\Labs\Lab2")
setwd("D:/Dropbox (Personal)/School/Fall2020/CP6025/Labs/Lab2")
pnorm(1)
# probability
pnorm(1)
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(2, 4, length = 200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
# probability
pnorm(1)
# normal distribution 2
# base line
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(2, 4, length = 200)
y = dnorm(x)
polygon(c(2,x,4), c(0,y,0),col="gray")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
# probability
pnorm(1)
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(2, 4, length = 200)
y = dnorm(x)
polygon(c(2,x,4), c(0,y,0),col="blue")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
# probability
pnorm(1)
1 - pnorm(2)
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(-4, 1, length=200)
y = dnorm(x)
polygon(c(-4,x,1),c(0,y,0),col="gray")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
# probability
pnorm(1)
# probability
1 - pnorm(2)
# probability
1 - pnorm(2)
round(1 - pnorm(2),3)
# normal distribution 3
# base line
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# base line
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(-2, 2, length = 200)
y = dnorm(x)
polygon(c(-2,x,2), c(0,y,0),col="blue")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(-2, 2, length = 200)
y = dnorm(x)
polygon(c(-2,x,2), c(0,y,0),col="yellow")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
# probability
1 - (pnorm(2)*2)
# probability
1- (1 - pnorm(2))*2
# probability
1 - (1 - pnorm(3))*2
# probability
1 - (1 - pnorm(2))*2
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(-2, 2, length = 200)
y = dnorm(x)
polygon(c(-2,x,2), c(0,y,0),col="orange")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(-2, 2, length = 200)
y = dnorm(x)
polygon(c(-2,x,2), c(0,y,0),col="skyblue")
axis(side = 1, at = c(-4, -3, -2, -1, 0, 1 , 2, 3, 4))
# probability
1 - (1 - pnorm(2))*2
round(1 - pnorm(2),3)
# probability
(x = 1 - (1 - pnorm(2))*2)
round(x, 3)
qnorm(0.95)
qnorm(0.05)
pnorm(0.95)
qnorm(0.95)
# normal distribution 4
# base line
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(1.644854, 4, length = 200)
y = dnorm(x)
polygon(c(1.644854,x,4), c(0,y,0),col="skyblue")
axis(side = 1, at = c(0))
x = seq(-4, 4, length = 200)
y = dnorm(x)
plot(x, y, type = 'l', lwd = 2, col = 'blue',
main = "Standard Normal Distribution",
xlab = "Standard Deviations from the Mean",
ylab = "Probability Density")
# coloring the area under the curve
x = seq(1.644854, 4, length = 200)
y = dnorm(x)
polygon(c(1.644854,x,4), c(0,y,0),col="red")
axis(side = 1, at = c(0))
# quantile
qnorm(0.95)
round(1.644854, 3)
round(1.644854, 4)
round(1.644854, 2)
qnorm(0.95, lower.tail = F)
qnorm(0.05, lower.tail = F)
qnorm(0.95, lower.tail = F)
round(qnorm(0.95, lower.tail = F), 3)
round(qnorm(0.95, lower.tail = F), )
2
round(qnorm(0.95, lower.tail = F), 2)
tstat <- (60 - 51)/14
zstat <- (60 - 51)/14
zstat
pnorm(zstat)
1 - pnorm(zstat)
Q1 <- 1 - pnorm(zstat)
(Q1 <- 1 - pnorm(zstat))
(Q2 <- pnorm(zstat))
(zstat1 <- (60 - 51)/14)
(zstat2 <- (80 - 51)/14)
(Q1 <- 1 - pnorm(zstat1))
(Q2 <- pnorm(zstat1))
zstat2
(Q3 <- pnorm(zstat2))
(Q3 <- 1 - pnorm(zstat2))
(Q1 <- 1 - pnorm(zstat1))
(Q1 <- 1 - pnorm(zstat1))
(Q2 <- pnorm(zstat1))
Q1 + Q2
?pnorm
pnorm(1.96)
1 - pnorm(1.96)
(zstat1 <- (60 - 51)/14)
(zstat2 <- (80 - 51)/14)
(Q1 <- 1 - pnorm(zstat1))
zstat1
pnorm(0.64)
zstat1
zz <- 0.64
(Q1 <- 1 - pnorm(zz))
(Q2 <- pnorm(zz))
(zstat1 <- (60 - 51)/14)
(zstat2 <- (80 - 51)/14)
(Q1 <- 1 - pnorm(zstat1))
(Q2 <- pnorm(zstat1))
(Q3 <- 1 - pnorm(zstat2))
(Q1 <- 1 - pnorm(zstat1))
(Q2 <- pnorm(zstat1))
(Q3 <- 1 - pnorm(zstat2))
(Q1 <- 1 - pnorm(zstat1))
round(0.2601584, 3)
(Q2 <- pnorm(zstat1))
round(0.7398416,3)
round(0.7398416,4)
(zstat1 <- (60 - 51)/14)
zstat1
options(scipen = 9999)
zstat1
zstat1 == 0.64285714285714285714285714285714
a = "0.64285714285714285714285714285714"
nchar(a)
(Q1 <- 1 - pnorm(0.64))
(Q2 <- pnorm(zstat1))
(Q2 <- pnorm(0.64))
(Q1 <- 1 - pnorm(0.643))
(Q1 <- 1 - pnorm(0.64))
